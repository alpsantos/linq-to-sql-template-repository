#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codevil.TemplateRepository.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="bank")]
	public partial class BankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertACCOUNT(ACCOUNT instance);
    partial void UpdateACCOUNT(ACCOUNT instance);
    partial void DeleteACCOUNT(ACCOUNT instance);
    partial void InsertPERSON(PERSON instance);
    partial void UpdatePERSON(PERSON instance);
    partial void DeletePERSON(PERSON instance);
    #endregion
		
		public BankDataContext() : 
				base(global::Codevil.TemplateRepository.Data.Properties.Settings.Default.bankConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this.GetTable<ACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<PERSON> PEOPLE
		{
			get
			{
				return this.GetTable<PERSON>();
			}
		}
	}
	
	[Table(Name="dbo.ACCOUNTS")]
	public partial class ACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private long _number;
		
		private short _agency;
		
		private int _person_id;
		
		private EntityRef<PERSON> _PEOPLE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(long value);
    partial void OnNumberChanged();
    partial void OnAgencyChanging(short value);
    partial void OnAgencyChanged();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    #endregion
		
		public ACCOUNT()
		{
			this._PEOPLE = default(EntityRef<PERSON>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="number", Storage="_number", DbType="BigInt NOT NULL")]
		public long Number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Name="agency", Storage="_agency", DbType="SmallInt NOT NULL")]
		public short Agency
		{
			get
			{
				return this._agency;
			}
			set
			{
				if ((this._agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Name="person_id", Storage="_person_id", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[Association(Name="PEOPLE_ACCOUNT", Storage="_PEOPLE", ThisKey="OwnerId", OtherKey="Id", IsForeignKey=true)]
		public PERSON PERSON
		{
			get
			{
				return this._PEOPLE.Entity;
			}
			set
			{
				PERSON previousValue = this._PEOPLE.Entity;
				if (((previousValue != value) 
							|| (this._PEOPLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PEOPLE.Entity = null;
						previousValue.ACCOUNTs.Remove(this);
					}
					this._PEOPLE.Entity = value;
					if ((value != null))
					{
						value.ACCOUNTs.Add(this);
						this._person_id = value.Id;
					}
					else
					{
						this._person_id = default(int);
					}
					this.SendPropertyChanged("PERSON");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PEOPLE")]
	public partial class PERSON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _document;
		
		private string _email;
		
		private EntitySet<ACCOUNT> _ACCOUNTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDocumentChanging(string value);
    partial void OnDocumentChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public PERSON()
		{
			this._ACCOUNTs = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNTs), new Action<ACCOUNT>(this.detach_ACCOUNTs));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="document", Storage="_document", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Document
		{
			get
			{
				return this._document;
			}
			set
			{
				if ((this._document != value))
				{
					this.OnDocumentChanging(value);
					this.SendPropertyChanging();
					this._document = value;
					this.SendPropertyChanged("Document");
					this.OnDocumentChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="PEOPLE_ACCOUNT", Storage="_ACCOUNTs", ThisKey="Id", OtherKey="OwnerId")]
		public EntitySet<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this._ACCOUNTs;
			}
			set
			{
				this._ACCOUNTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACCOUNTs(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = this;
		}
		
		private void detach_ACCOUNTs(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = null;
		}
	}
}
#pragma warning restore 1591
